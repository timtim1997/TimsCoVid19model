import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
#Number of people
N = 10000
#Empty lists for each itteration
A0=[1]
B0=[0]
I0=[0]
O0=[0]
M0=[0]
S0 = [N - I0[-1] - A0[-1]-B0[-1]-O0[-1]-M0[-1]]
# Rates of movements
ab,g,ga,d,db1,db2,e,ei1,ei2 =2.4,0.89,1,0.06,0.9,0.1,0.05,0.1,0.9
#Timepoints total
z=100
#linespace for ODE
x = np.linspace(0, 2, num=2)

# The SIR model differential equations.
def deriv(y, x, N, ab,g,ga,d,db1,db2,e,ei1,ei2):
    A,B,I,O,M,S = y
    dAdt = +(S*ab*g* (A)) -(A*ga)
    dBdt = +(S*d*ab *(A))-(B*db1)-(B*db2)
    dIdt = +(S*e*ab *(A))-(I*ei1)-(I*ei2)
    dOdt =(A*ga)+(B*db1)+(I*ei1)
    dMdt =(B*db2)+(I*ei2)
    dSdt = -(ab* S * (A+B+I))/ N
    return dAdt, dBdt, dIdt,dOdt, dMdt, dSdt
#while loop for timed results
while z>0:
# Initial conditions vector
    y0 = A0[-1],B0[-1],I0[-1],O0[-1],M0[-1],S0[-1]
# Integrate the SIR equations over the time grid, t.
    ret = odeint(deriv, y0, x, args=(N, ab,g,ga,d,db1,db2,e,ei1,ei2))

    A0.append(ret.T[0][0])
    B0.append(ret.T[1][0])
    I0.append(ret.T[2][0])
    O0.append(ret.T[3][0])
    M0.append(ret.T[4][0])
    S0.append(ret.T[5][0])
    z-=1
#Final time linespace for plot (I know shapes here are messed up but that's a later problem)
t = np.linspace(0, z)
# Plot the data on three separate curves for S(t), I(t) and R(t)
fig = plt.figure(facecolor='w')
ax = fig.add_subplot(111, axisbelow=True)
ax.plot(t, A0, alpha=0.5, lw=2, label='asimp')
ax.plot(t, B0, alpha=0.5, lw=2, label='bolnica')
ax.plot(t, I0, alpha=0.5, lw=2, label='icu')
ax.plot(t, O0, alpha=0.5, lw=2, label='ozdraveli')
ax.plot(t, M0, alpha=0.5, lw=2, label='umrlid')
ax.plot(t, S0, alpha=0.5, lw=2, label='ostali')
ax.set_xlabel('Time /days')
ax.set_ylabel('Number (1000s)')
ax.set_ylim(0,1.2)
ax.yaxis.set_tick_params(length=0)
ax.xaxis.set_tick_params(length=0)
ax.grid(b=True, which='major', c='w', lw=2, ls='-')
legend = ax.legend()
legend.get_frame().set_alpha(0.5)
for spine in ('top', 'right', 'bottom', 'left'):
    ax.spines[spine].set_visible(False)
plt.show()
                
